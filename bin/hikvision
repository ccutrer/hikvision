#!/usr/bin/env ruby

require 'hikvision'
require 'gli'

class Numeric
  def duration
    secs  = to_i
    mins  = secs / 60
    hours = mins / 60
    days  = hours / 24

    "#{days} days #{hours % 24} hours #{mins % 60} minutes #{secs % 60} seconds"
  end
end

class App
  extend GLI::App

  def self.print_kv(key, value, opts)
    puts "#{opts[:'with-key'] ? key.to_s + ': ' : ''}#{value}" if opts[key]
  end

  def self.set_if_in_opts(obj, setter, val, opts)
    return if val.nil?

    if opts.include? val
      obj.send(setter, val)
    else
      exit_now! "\"#{val}\" is invalid, choose from: #{opts.join(', ')}", 1
    end
  end

  flag %i[h host], required: true
  flag %i[u user], required: true
  flag %i[p password], required: true

  pre do |gopts, _opts, _args|
    @cam = Hikvision::ISAPI.new(gopts[:h], gopts[:u], gopts[:p])
    exit_now! 'could not authenticate' if @cam.put('/ISAPI/Security/sessionHeartbeat').response.code == '401'
    1
  end

  command :uptime do |c|
    c.action do
      puts @cam.system.uptime.duration
    end
  end

  command :date do |c|
    c.flag :strftime, default_value: '%c'
    c.action do
      puts @cam.system.time.strftime opts[:strftime].to_s
    end
  end

  command :model do |c|
    c.action do
      @cam.system.load_device_info
      puts @cam.system.model
    end
  end

  command :serial do |c|
    c.action do
      @cam.system.load_device_info
      puts @cam.system.serial
    end
  end

  desc 'Shows the device id'
  command :id do |c|
    c.action do
      @cam.system.load_device_info
      puts @cam.system.id
    end
  end

  desc 'Shows the device description'
  command :desc do |c|
    c.action do
      @cam.system.load_device_info
      puts @cam.system.description
    end
  end

  command :mac do |c|
    c.action do
      @cam.system.load_device_info
      puts @cam.system.mac_address
    end
  end

  command :reboot do |c|
    c.action do
      @cam.system.reboot
    end
  end

  desc 'List available channels'
  command :channels do |c|
    c.action do
      @cam.streaming.load_channels
      puts @cam.streaming.channels.collect { |ch| ch.id }
    end
  end

  command :channel do |c|
    c.flag :'save-picture', arg_name: 'file', desc: 'saves picture to file'
    c.flag :'set-video-codec'
    c.switch :'video-codec', negatable: false
    c.flag :'set-audio-codec'
    c.switch :'audio-codec', negatable: false
    c.switch :'disable-audio', negatable: false
    c.switch :'enable-audio', negatable: false
    c.switch :'video-resolution', negatable: false
    c.switch :'video-framerate', negatable: false
    c.switch :'video-keyframe-interval', negatable: false
    c.switch :'video-cbr', negatable: false
    c.switch :'video-bitrate-type', negatable: false
    c.switch :'video-scan-type', negatable: false
    c.switch :'video-enabled', negatable: false
    c.switch :'audio-enabled', negatable: false
    c.switch :enabled, negatable: false
    c.switch :name, negatable: false
    c.flag :'set-name'
    c.switch :all, negatable: false, desc: 'prints all possible information'
    c.switch :'with-key', negatable: false, desc: 'prints values with keys'

    c.action do |_gopts, opts, args|
      exit_now! "missing id\nusage: channel <id> [opts]", 1 if args.length != 1
      id = args[0]
      exit_now! 'channel id must be an integer', 1 if id.to_i.to_s != id
      id = id.to_i
      @cam.streaming.load_channels
      ch = @cam.streaming.channel(id)
      exit_now! "channel id doesn't exists", 1 if ch.nil?

      set_opts = %i[set-name set-video-codec set-audio-codec disable-audio enable-audio]

      if opts[:all]
        opts.each do |key|
          next if (%w[with-key save-picture] + set_opts.map { |o| o.to_s }).include? key[0].to_s

          opts[key[0]] = true
        end
      end

      if opts[:'save-picture']
        file = File.open(opts[:'save-picture'], 'w+b')
        file.write(ch.picture)
        file.close
      end

      print_kv :name, ch.name, opts
      print_kv :enabled, ch.enabled?, opts
      print_kv :'video-enabled', ch.video_enabled?, opts
      print_kv :'video-codec', ch.video_codec, opts
      print_kv :'video-framerate', ch.video_framerate / 100.0, opts
      print_kv :'video-resolution', ch.video_resolution.collect { |r| r.to_s }.join('x'), opts
      print_kv :'video-keyframe-interval', ch.video_keyframe_interval, opts
      print_kv :'video-bitrate-type', ch.video_bitrate_type, opts
      print_kv :'video-cbr', ch.video_cbitrate, opts
      print_kv :'video-scan-type', ch.video_scan_type, opts
      print_kv :'audio-enabled', ch.audio_enabled?, opts
      print_kv :'audio-codec', ch.audio_codec, opts

      edited = false
      set_opts.each do |k|
        next unless opts[k]

        edited = true
        ch.load_opts
        break
      end

      ch.name = opts[:'set-name'] if opts[:'set-name']
      set_if_in_opts(ch, :video_codec=, opts[:'set-video-codec'], ch.video_codec_opts)
      set_if_in_opts(ch, :audio_codec=, opts[:'set-audio-codec'], ch.audio_codec_opts)
      set_if_in_opts(ch, :audio_enabled=, false, [false]) if opts[:'disable-audio']
      set_if_in_opts(ch, :audio_enabled=, true, [true]) if opts[:'enable-audio']

      ch.edit if edited
    end
  end
end

exit App.run(ARGV)
